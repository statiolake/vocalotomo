openapi: 3.0.0
info:
  title: わくわくボカロプラットフォーム
  description: わくわくボカロプラットフォームのバックエンド API 。
  version: 0.1.0
servers:
  - url: http://localhost:8000
  - url: http://example.com:8000
tags:
  - name: auth
    description: ログイン/ログアウトを管轄する API 群。
  - name: users
    description: ユーザーを管理する API 群。
  - name: lives
    description: ライブの検索や参加登録を扱う API 群。
  - name: directmessages
    description: ダイレクトメッセージ (DM) を管理する API 群。
  - name: posts
    description: 投稿を管理する API 群。
  - name: follows
    description: フォロー/フォロワー関係を管理する API 群。
  - name: goods
    description: いいねを管理する API 群。
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: ログインする。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: |
            メールアドレスが登録されていないかパスワードが異なる。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1000
                  error:
                    type: string
                    example: invalid e-mail address or password
  /auth/logout:
    get:
      tags:
        - auth
      security:
        - bearer: []
      summary: ログアウトする。
      responses:
        "200":
          description: 成功。
          content:
            "*/*":
              schema:
                type: object
                properties: {}
        "401":
          description: |
            ログインしていない。
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1001
                  error:
                    type: string
                    example: no active user
  /auth/me:
    get:
      tags:
        - auth
      security:
        - bearer: []
      summary: 現在ログインしているユーザーの情報を得る。
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: |
            ログインしていない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1001
                  error:
                    type: string
                    example: no active user
  /users:
    post:
      tags:
        - users
      summary: ユーザーを追加する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                profile:
                  type: string
                icon:
                  description: base64 でエンコードされたアイコン画像。
                  type: string
        required: true
      responses:
        "201":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: 既に登録されているメールアドレスが使用された。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 2001
                  error:
                    type: string
                    example: e-mail already registered
  "/users/{user_id}":
    get:
      tags:
        - users
      summary: user_id に対応するユーザーの情報を得る。
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: ユーザーが存在しない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 2000
                  error:
                    type: string
                    example: specified user not found
  /lives:
    get:
      tags:
        - lives
      summary: ライブを一覧/検索する。
      description: クエリパラメータでフィルタリング条件を指定できる。タイトル検索やホットなライブ検索もこれで行う。
      parameters:
        - name: q
          in: query
          description: タイトルがマッチするもののみ取得する。キーワードは `+` で区切って AND 検索することができる。
          required: false
          schema:
            type: string
        - name: popularity
          in: query
          description: 参加登録者数がこの数値より多いライブのみ取得する。
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: 成功。条件に合うライブが一つもなくても成功。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Live"
  "/lives/{live_id}":
    get:
      tags:
        - lives
      summary: 特定のライブの情報を取得する。
      parameters:
        - name: live_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Live"
        "404":
          description: ライブが存在しない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 3000
                  error:
                    type: string
                    example: specified live not found
  /live_registrations:
    post:
      tags:
        - lives
      security:
        - bearer: []
      summary: ライブへの参加登録をする。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  description: 自分のユーザー。
                  type: integer
                live_id:
                  description: 登録するライブ。
                  type: integer
                ticket_id:
                  description: ライブのチケット ID 。
                  type: string
        required: true
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiveRegistration"
        "401":
          description: ログインしていないか、自分ではないユーザー ID で登録しようとしているか、ライブのチケットが有効ではない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                自分ではないユーザー ID で登録しようとしている:
                  value:
                    code: 3001
                    error: invalid user specified
                ライブのチケットが有効ではない:
                  value:
                    code: 3002
                    error: invalid live ticket
  /directmessages:
    post:
      tags:
        - directmessages
      security:
        - bearer: []
      summary: ダイレクトメッセージを送信する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sender_id:
                  description: 送り手のユーザー (自分) 。
                  type: integer
                receiver_id:
                  description: 送信先のユーザー。
                  type: integer
                text:
                  description: メッセージ本文。
                  type: string
                sent_at:
                  description: 送信時刻。
                  type: string
                  format: date-time
        required: true
      responses:
        "201":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectMessage"
        "401":
          description: ログインしていないか、自分ではないユーザー ID から送信しようとしたか、送信先のユーザーをフォローしていない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                自分ではないユーザー ID から送信しようとしている:
                  value:
                    code: 4000
                    error: invalid sender specified
                送信先のユーザーをフォローしていない:
                  value:
                    code: 4002
                    error: receiver not followed by sender
        "404":
          description: 送信先のユーザーが存在しない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                送信先のユーザーが存在しない:
                  value:
                    code: 4001
                    error: invalid receiver specified
    get:
      tags:
        - directmessages
      security:
        - bearer: []
      summary: メッセージのやりとりを一覧する。
      description: central のユーザーを中心とした DM を検索する。 (central はログインしているユーザー自身の ID となる。) target を指定しなければ、全ての DM のうち送信者または受信者に central が表れる DM を一覧することができる。target にユーザー ID を指定すれば、central と target がそれぞれ送信者と受信者 (または受信者と送信者) となっている DM のみを一覧する。
      parameters:
        - name: central
          in: query
          description: 会話の中心となるユーザー (自分自身) の ID 。
          required: true
          schema:
            type: string
        - name: target
          in: query
          description: 会話の対象となるユーザーの ID 。
          required: false
          schema:
            type: string
      responses:
        "200":
          description: 成功。条件にあう DM が一つもなくても成功。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DirectMessage"
        "401":
          description: ログインしていないか、自分ではないユーザー ID が central に指定されたか、central とtarget の間に一切 FF (フォロー) 関係がない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                central のユーザー ID が自分ではない:
                  value:
                    code: 4003
                    error: invalid central specified
                central と target に FF 関係がない:
                  value:
                    code: 4004
                    error: no ff relation between central and target
  /posts:
    post:
      tags:
        - posts
      security:
        - bearer: []
      summary: 新しく投稿する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  description: 投稿したユーザー (自分) 。
                  type: integer
                reply_target_id:
                  description: リプライ先の投稿 ID 。
                  type: integer
                live_id:
                  description: 投稿先の部屋のライブ ID。
                  type: integer
                text:
                  description: 投稿したテキスト。
                  type: string
                screenshots:
                  description: 投稿したスクリーンショットを base64 エンコードしたものの配列。
                  type: array
                  items:
                    type: string
                posted_at:
                  description: 投稿した時刻。
                  type: string
                  format: date-time
              required:
                - author_id
                - live_id
                - text
                - screenshots
                - posted_at
        required: true
      responses:
        "201":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: ログインしていないか、自分ではないユーザー ID から投稿しようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                自分ではないユーザー ID から投稿しようとした:
                  value:
                    code: 5000
                    error: invalid author specified
        "404":
          description: 投稿先の部屋 (ライブ) が存在しないか、 リプライ先の投稿が存在しない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                投稿先の部屋が存在しない:
                  value:
                    code: 5001
                    error: live not found
                リプライ先が存在しない:
                  value:
                    code: 5002
                    error: reply target not found
    get:
      tags:
        - posts
      security:
        - bearer: []
      summary: 投稿を一覧する。
      description: |
        live にライブ ID を指定すれば特定のライブに絞りこむことができ、author にユーザー ID を指定すれば特定のユーザーの書き込みに絞り込むことができる。この API は live や author にそのユーザーからアクセスできないリソースが指定されていたとしてもエラーにはならず、単に空の配列が返る。(クエリパラメータはあくまでフィルタリングで、もともとの全体集合がそのユーザーから見えるリソースだけになっていると考えるとよい。全体集合はクエリパラメータなしで呼び出すことで得られる。)
        note: 権限のないライブであっても特定のユーザー ID の投稿は見られる機能があるため、この仕様とした。
        note: ユーザー ID 側だけにバリデーションを設けることはしていないが可能ではあるので、あるほうが良ければ修正を検討すべし。
      parameters:
        - name: live
          description: 対象にしたいライブ ID 。
          in: query
          required: false
          schema:
            type: integer
        - name: author
          description: 対象にしたいユーザー。
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          description: ログインしていない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 1001
                  error:
                    type: string
                    example: no active user
  /follows:
    post:
      tags:
        - follows
      security:
        - bearer: []
      summary: ユーザーをフォローする。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  description: 自分のユーザー ID 。
                  type: integer
                target_id:
                  description: フォロー先のユーザー ID 。
                  type: integer
        required: true
      responses:
        "201":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Follow"
        "401":
          description: ログインしていないか、自分ではないユーザーからフォローしようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                自分ではないユーザーからフォローしようとした:
                  value:
                    code: 6001
                    error: invalid user specified
        "404":
          description: 対象となるユーザーが見つからない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 6002
                  error:
                    type: string
                    example: user not found
        "409":
          description: すでにフォローしている人をフォローしようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 6000
                  error:
                    type: string
                    example: already followed
    get:
      tags:
        - follows
      summary: フォローを一覧する。
      description: サービス上に存在する全てのフォローを一覧する。user を指定するとそのユーザーからのフォローに絞り込む。target を指定するとそのユーザーへのフォローに絞り込む。
      parameters:
        - name: user
          in: query
          required: false
          schema:
            type: integer
        - name: target
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: 成功。条件に合うフォローがされていなくても成功。
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Follow"
        "404":
          description: user または target に指定されたユーザーが見つからない。
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 6002
                  error:
                    type: string
                    example: user not found
  "/follows/{follow_id}":
    delete:
      tags:
        - follows
      security:
        - bearer: []
      summary: フォローを解除する。
      parameters:
        - name: follow_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: ログインしていないか、他人がしたフォローを削除しようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                他人がしたフォローを削除しようとした:
                  value:
                    code: 6003
                    error: specified follow is not created by user
        "404":
          description: 解除するフォローが見つからない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 6004
                  error:
                    type: string
                    example: follow not found
  /goods:
    post:
      tags:
        - goods
      security:
        - bearer: []
      summary: 投稿をいいねする。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  description: 自分のユーザー ID 。
                  type: integer
                post_id:
                  description: いいねする投稿の ID 。
                  type: integer
        required: true
      responses:
        "201":
          description: 成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Good"
        "401":
          description: ログインしていないか、自分ではないユーザーからいいねしようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                自分ではないユーザーからフォローしようとした:
                  value:
                    code: 7001
                    error: invalid user specified
        "404":
          description: 対象となる投稿が見つからない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 7002
                  error:
                    type: string
                    example: post not found
        "409":
          description: すでにいいねしている投稿をいいねしようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 7000
                  error:
                    type: string
                    example: good already done
    get:
      tags:
        - goods
      summary: いいねを一覧する。
      description: サービス上に存在する全てのいいねを一覧する。user を指定するとそのユーザーからのいいねに絞り込む。post を指定するとそのユーザーへのいいねに絞り込む。
      parameters:
        - name: user
          in: query
          required: false
          schema:
            type: integer
        - name: post
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: 成功。条件に合ういいねがされていなくても成功。
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Good"
        "404":
          description: user に指定されたユーザーが見つかないか、post に指定された投稿が見つからない。
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ユーザーが見つからない:
                  value:
                    code: 7002
                    error: user not found
                投稿が見つからない:
                  value:
                    code: 7005
                    error: post not found
  "/goods/{good_id}":
    delete:
      tags:
        - goods
      security:
        - bearer: []
      summary: いいねを解除する。
      parameters:
        - name: good_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 成功。
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: ログインしていないか、他人がしたいいねを削除しようとした。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  error:
                    type: string
              examples:
                ログインしていない:
                  value:
                    code: 1001
                    error: no active user
                他人がしたいいねを削除しようとした:
                  value:
                    code: 7003
                    error: specified good is not created by user
        "404":
          description: 解除するいいねが見つからない。
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 7004
                  error:
                    type: string
                    example: good not found
components:
  securitySchemes:
    bearer:
      name: Authorization
      type: apiKey
      in: header
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        username:
          type: string
        profile:
          type: string
        icon:
          description: base64 でエンコードされたアイコン画像。
          type: string
    Live:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        started_at:
          description: ライブが開始した時刻。
          type: string
          format: date-time
        live_url:
          description: ライブの視聴画面の URL 。
          type: string
          format: uri
        ticket_url:
          description: チケット購入画面の URL 。
          type: string
          format: uri
        registerers:
          description: このライブを登録している人の数。
          type: integer
    LiveRegistration:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        live:
          $ref: "#/components/schemas/Live"
    DirectMessage:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: "#/components/schemas/User"
        receiver:
          $ref: "#/components/schemas/User"
        sent_at:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        id:
          type: integer
        author:
          $ref: "#/components/schemas/User"
        reply_target:
          $ref: "#/components/schemas/Post"
        live:
          $ref: "#/components/schemas/Live"
        text:
          type: string
        screenshots:
          type: array
          description: スクリーンショットを base64 エンコードしたものの配列。
          items:
            type: string
        posted_at:
          type: string
          format: date-time
    Follow:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        target:
          $ref: "#/components/schemas/User"
    Good:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
